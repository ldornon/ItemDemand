theme(aspect.ratio = 1)
new_elec %>%
mutate(rowNum = row.names(new_elec)) %>%  # save original row numbers
filter(cooksd > 4 / length(cooksd)) %>%  # select potential outliers
arrange(desc(cooksd))
new_elec %>%
mutate(rowNum = row.names(new_elec)) %>%  # save original row numbers
filter(cooksd > 4 / length(cooksd)) %>%  # select potential outliers
arrange(desc(cooksd))
bc <- boxCox(lm_new_elec)  # plot curve
bc$x[which.max(bc$y)]
shapiro.test(lm_new_elec$residuals)
ggplot(data = new_elec) +
geom_histogram(mapping = aes(x = lm_new_elec$residuals, y = ..density..),
binwidth = .5) +
stat_function(fun = dnorm,
color = "chartreuse",
size = 2,
args = list(mean = mean(lm_new_elec$residuals),
sd = sd(lm_new_elec$residuals))) +
theme(aspect.ratio = 1)
ggplot(new_elec) +
geom_point(mapping = aes(x = MinTemp,
y = Energy,
color = Year),) +
geom_line(mapping = aes(x = MinTemp,
y = predict(lm_new_elec),
color = Year)) +
theme(aspect.ratio = 1)
bptest(lm_new_elec)
new_elec_inter_lm <- lm(Energy ~ MinTemp + Year + MinTemp:Year, data = new_elec)
summary(new_elec_inter_lm)
new_elec$residuals_inter <- new_elec_inter_lm$residuals
new_elec$fitted_inter <- new_elec_inter_lm$fitted.values
new_elec_inter_lm_qq <- autoplot(new_elec_inter_lm, which = 2, ncol = 1, nrow = 1)+
theme(aspect.ratio = 1)
new_elec_inter_lm_qq
new_elec_inter_lm_resid_vs_fit <- autoplot(new_elec_inter_lm,
which = 1, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
new_elec_inter_lm_resid_vs_fit
# Transformed LM
#new_elec$Energy_trans <- 1/((new_elec$Energy)**2)
new_elec_trans <- (new_elec$Energy^(-2)-1)/(-2)
new_elec_lm_trans <- lm(new_elec_trans ~ MinTemp + Year,
data = new_elec)
new_elec_lm_trans_inter <- lm(new_elec_trans ~ MinTemp + Year + MinTemp*Year,
data = new_elec)
summary(new_elec_lm_trans)
summary(new_elec_lm_trans_inter)
new_elec$residuals_trans <- new_elec_lm_trans$residuals
new_elec$fittedEnergy_trans <- new_elec_lm_trans$fitted.values
new_elec$residuals_trans_inter <- new_elec_lm_trans_inter$residuals
new_elec$fittedEnergy_trans_inter <- new_elec_lm_trans_inter$fitted.values
#Normality Assumption
new_elec_lm_trans_qq <- autoplot(new_elec_lm_trans, which = 2, ncol = 1, nrow = 1)+
theme(aspect.ratio = 1)
new_elec_lm_trans_qq
new_elec_lm_trans_inter_qq <- autoplot(new_elec_lm_trans_inter, which = 2, ncol = 1,
nrow = 1)+
theme(aspect.ratio = 1)
new_elec_lm_trans_inter_qq
new_elec_qq <- autoplot(lm_new_elec, which = 2, ncol = 1, nrow = 1)+
theme(aspect.ratio = 1)
new_elec_qq
#Scatterplot for Assessing Linearity
ggplot(new_elec) +
geom_point(mapping = aes(x = MinTemp,
y = new_elec_trans,
color = Year),) +
geom_line(mapping = aes(x = MinTemp,
y = predict(new_elec_lm_trans),
color = Year)) +
theme(aspect.ratio = 1)
ggplot(new_elec) +
geom_point(mapping = aes(x = MinTemp,
y = new_elec_trans,
color = Year),) +
geom_line(mapping = aes(x = MinTemp,
y = predict(new_elec_lm_trans_inter),
color = Year)) +
theme(aspect.ratio = 1)
ggplot(new_elec) +
geom_point(mapping = aes(x = MinTemp,
y = Energy,
color = Year),) +
geom_line(mapping = aes(x = MinTemp,
y = predict(lm_new_elec),
color = Year)) +
theme(aspect.ratio = 1)
# Residuals vs Fitted Values for Equal Variance Assumption
new_elec_lm_trans_inter_resid_vs_fit <- autoplot(new_elec_lm_trans_inter,
which = 1, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
new_elec_lm_trans_inter_resid_vs_fit
lm_new_elec_resid_vs_fit <- autoplot(lm_new_elec, which = 1, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
lm_new_elec_resid_vs_fit
# Histogram- Needs Help!
ggplot(data = new_elec) +
geom_histogram(mapping = aes(x = residuals_trans, y = ..density..),
binwidth = .000008) +
stat_function(fun = dnorm,
color = "chartreuse",
size = 2,
args = list(mean = mean(new_elec$residuals_trans),
sd = sd(new_elec$residuals_trans))) +
theme(aspect.ratio = 1)
ggplot(data = new_elec) +
geom_histogram(mapping = aes(x = lm_new_elec$residuals, y = ..density..),
binwidth = .5) +
stat_function(fun = dnorm,
color = "chartreuse",
size = 2,
args = list(mean = mean(lm_new_elec$residuals),
sd = sd(lm_new_elec$residuals))) +
theme(aspect.ratio = 1)
ggplot(data = new_elec) +
geom_histogram(mapping = aes(x = new_elec$residuals_trans_inter, y = ..density..),
binwidth = .00001) +
stat_function(fun = dnorm,
color = "lightblue1",
size = 2,
args = list(mean = mean(new_elec$residuals_trans_inter),
sd = sd(new_elec$residuals_trans_inter))) +
theme(aspect.ratio = 1)
# Shapiro-Wilk for Normality
shapiro.test(new_elec$residuals_trans)
shapiro.test(lm_new_elec$residuals)
shapiro.test(new_elec$residuals_trans_inter)
bptest(lm_new_elec)
ggplot(data = new_elec, aes(x = Year, y= Energy)) +
geom_boxplot() +
labs(title ="Energy vs Year", x = "Year", y = "Energy") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = new_elec, aes(x = Year, y= new_elec_trans)) +
geom_boxplot() +
labs(title ="Energy vs Year", x = "Year", y = "Transformed Energy") +
theme(plot.title = element_text(hjust = 0.5))
# Checking Model Fit
AIC(lm_new_elec)
BIC(lm_new_elec)
AIC(new_elec_lm_trans_inter)
BIC(new_elec_lm_trans_inter)
AIC(new_elec_lm_trans)
BIC(new_elec_lm_trans)
bc <- boxCox(lm_new_elec)  # plot curve
bc$x[which.max(bc$y)]
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
library(corrplot)
library(bestglm)
library(lmtest)
library(ggplot2)
elec <- IrishElectricity
elec <- as.data.frame(elec)
elec$Date <- mdy(elec$Date)
elec$Year <- year(elec$Date)
elec$Year <- as.factor(elec$Year)
elec$Day <- as.factor(elec$Day)
summary(elec)
ggplot(data = elec) +
geom_boxplot(mapping = aes(x = Year, y = Energy)) +
theme(aspect.ratio = 1)
ggplot(data = elec) +
geom_point(mapping = aes(x = Energy,
y = MinTemp,
color = Year)) +
theme(aspect.ratio = 1)
ggplot(data = elec) +
geom_histogram(mapping = aes(x = Energy, y = after_stat(density)),
binwidth = 2) +
theme_bw() +
theme(aspect.ratio = 1)
elec$num_days <- as.numeric(elec$Date) - 14562
elec <- elec %>% relocate(Energy,.after = last_col())
best_elec_bic <- bestglm(elec[-1],
IC = "BIC",
method = "exhaustive",
TopModels = 10)
summary(best_elec_bic$BestModel)
elec_lm <- glm(Energy ~ MinTemp + Year,
data = elec)
summary(elec_lm)
elec$residuals <- elec_lm$residuals
elec$cooksd <- cooks.distance(best_elec_bic$BestModel)
ggplot(data = elec) +
geom_point(mapping = aes(x = as.numeric(rownames(elec)),
y = cooksd)) +
ylab("Cook's Distance") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 4 / length(cooksd)),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
ggplot(elec) +
geom_point(mapping = aes(x = MinTemp,
y = Energy,
color = Year),) +
geom_line(mapping = aes(x = MinTemp,
y = predict(best_elec_bic$BestModel),
color = Year)) +
theme(aspect.ratio = 1)
elec_boxplot <- ggplot(data = elec) +
geom_boxplot(mapping = aes(y = elec$residuals))+
theme(aspect.ratio = 1)
elec_boxplot
elec_qq <- autoplot(elec_lm, which = 2, ncol = 1, nrow = 1)+
theme(aspect.ratio = 1)
elec_qq
shapiro.test(elec_lm$residuals)
elec_resid_vs_fit <- autoplot(elec_lm, which = 1, ncol = 1, nrow = 1) +
theme(aspect.ratio = 1)
elec_resid_vs_fit
bptest(elec_lm)
elec$dfbetas_precip <- as.vector(dfbetas(elec_lm)[, 2])
ggplot(data = elec) +
geom_point(mapping = aes(x = as.numeric(rownames(elec)),
y = abs(dfbetas_precip))) +
ylab("Absolute Value of DFBETAS for Precipitation") +
xlab("Observation Number") +
geom_hline(mapping = aes(yintercept = 2 / sqrt(length(dfbetas_precip))),
color = "red",
linetype = "dashed") +
theme(aspect.ratio = 1)
elec_inter_lm <- glm(Energy ~ MinTemp + Year + MinTemp:Year,
data = elec)
summary(elec_inter_lm)
elec$inter_residuals <- elec_inter_lm$residuals
ggplot(elec) +
geom_point(mapping = aes(x = MinTemp,
y = Energy,
color = Year),) +
geom_line(mapping = aes(x = MinTemp,
y = predict(elec_inter_lm),
color = Year)) +
theme(aspect.ratio = 1)
ggplot(elec) +
geom_point(mapping = aes(x = MinTemp,
y = Energy,
color = Year),) +
geom_line(mapping = aes(x = MinTemp,
y = predict(best_elec_bic$BestModel),
color = Year)) +
theme(aspect.ratio = 1)
setwd("~/Documents/Stat 348/ItemDemand")
library(vroom)
library(timetk)
library(tidyverse)
library(patchwork)
library(tidymodels)
library(forecast)
ID_train <- vroom("./train.csv")
ID_test <- vroom("./test.csv")
library(modeltime)
train <- ID_train %>% filter(store == 3, item == 10)
cv_split1 <- time_series_split(train, assess= "3 months", cumulative = TRUE)
arima_recipe <- recipe(sales~., data = train) %>%
step_date(date, features =c("dow","month","year"))
arima_model <- arima_reg(seasonal_period = 365,
non_seasonal_ar = 5,
non_seasonal_ma = 5,
seasonal_ar = 2,
non_seasonal_differences = 2,
seasonal_differences = 2) %>%
set_engine("auto_arima")
arima_wf <- workflow() %>%
add_recipe(arima_recipe) %>%
add_model(arima_model) %>%
fit(data=training(cv_split1))
cv_results <- modeltime_calibrate(arima_wf,
new_data = testing(cv_split1))
p1<- cv_results %>%
modeltime_forecast(new_data = testing(cv_split1),
actual_data = train) %>%
plot_modeltime_forecast(.interactive = TRUE)
cv_results %>% modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
es_fullfit <- cv_results %>%
modeltime_refit(data = train)
es_preds <- es_fullfit %>%
modeltime_forecast(new_data=train) %>%
rename(date= .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y= ID_test, by= "date") %>%
select(id, sales)
p2<- es_fullfit %>%
modeltime_forecast(new_data= train, actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE)
arima_recipe <- recipe(sales~., data = train2) %>%
step_date(date, features =c("dow","month","year"))
train2 <- ID_train %>% filter(store == 5, item == 7)
cv_split2 <- time_series_split(train2, assess= "3 months", cumulative = TRUE)
arima_recipe <- recipe(sales~., data = train2) %>%
step_date(date, features =c("dow","month","year"))
arima_model <- arima_reg(seasonal_period = 365,
non_seasonal_ar = 5,
non_seasonal_ma = 5,
seasonal_ar = 2,
non_seasonal_differences = 2,
seasonal_differences = 2) %>%
set_engine("auto_arima")
arima_wf <- workflow() %>%
add_recipe(arima_recipe) %>%
add_model(arima_model) %>%
fit(data=training(cv_split2))
cv_results <- modeltime_calibrate(arima_wf,
new_data = testing(cv_split2))
p3 <- cv_results %>%
modeltime_forecast(new_data = testing(cv_split2),
actual_data = train2) %>%
plot_modeltime_forecast(.interactive = TRUE)
cv_results %>% modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
es_fullfit <- cv_results %>%
modeltime_refit(data = train2)
es_preds <- es_fullfit %>%
modeltime_forecast(new_data=train2) %>%
rename(date= .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y= ID_test, by= "date") %>%
select(id, sales)
p4 <- es_fullfit %>%
modeltime_forecast(new_data= train2, actual_data = train2) %>%
plot_modeltime_forecast(.interactive = FALSE)
plotly::subplot(p1,p3, p2,p4, nrows = 2)
arima_recipe <- recipe(sales~., data = train) %>%
step_date(date, features =c("dow","month","year"))
arima_model <- arima_reg(seasonal_period = 365,
non_seasonal_ar = 5,
non_seasonal_ma = 5,
seasonal_ar = 2,
non_seasonal_differences = 2,
seasonal_differences = 2) %>%
set_engine("auto_arima")
train <- ID_train %>% filter(store == 3, item == 10)
cv_split1 <- time_series_split(train, assess= "3 months", cumulative = TRUE)
cv_split1 %>% tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
arima_wf <- workflow() %>%
add_recipe(arima_recipe) %>%
add_model(arima_model) %>%
fit(data=training(cv_split1))
cv_results <- modeltime_calibrate(arima_wf,
new_data = testing(cv_split1))
p1<- cv_results %>%
modeltime_forecast(new_data = testing(cv_split1),
actual_data = train) %>%
plot_modeltime_forecast(.interactive = TRUE)
cv_results %>% modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
arima_fullfit <- cv_results %>%
modeltime_refit(data = train)
arima_preds <- arima_fullfit %>%
modeltime_forecast(new_data=train) %>%
rename(date= .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y= ID_test, by= "date") %>%
select(id, sales)
p2<- arima_fullfit %>%
modeltime_forecast(new_data= train, actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE)
arima_recipe <- recipe(sales~., data = train2) %>%
step_date(date, features =c("dow","month","year"))
arima_model <- arima_reg(seasonal_period = 365,
non_seasonal_ar = 5,
non_seasonal_ma = 5,
seasonal_ar = 2,
non_seasonal_differences = 2,
seasonal_differences = 2) %>%
set_engine("auto_arima")
arima_wf <- workflow() %>%
add_recipe(arima_recipe) %>%
add_model(arima_model) %>%
fit(data=training(cv_split2))
cv_results <- modeltime_calibrate(arima_wf,
new_data = testing(cv_split2))
p3 <- cv_results %>%
modeltime_forecast(new_data = testing(cv_split2),
actual_data = train2) %>%
plot_modeltime_forecast(.interactive = TRUE)
cv_results %>% modeltime_accuracy() %>%
table_modeltime_accuracy(.interactive = FALSE)
arima_fullfit <- cv_results %>%
modeltime_refit(data = train2)
arima_preds <- arima_fullfit %>%
modeltime_forecast(new_data=train2) %>%
rename(date= .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y= ID_test, by= "date") %>%
select(id, sales)
p4 <- arima_fullfit %>%
modeltime_forecast(new_data= train2, actual_data = train2) %>%
plot_modeltime_forecast(.interactive = FALSE, .legend_show = FALSE)
plotly::subplot(p1,p3, p2,p4, nrows = 2)
p1<- cv_results %>%
modeltime_forecast(new_data = testing(cv_split1),
actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE)
p3 <- cv_results %>%
modeltime_forecast(new_data = testing(cv_split2),
actual_data = train2) %>%
plot_modeltime_forecast(.interactive = FALSE)
plotly::subplot(p1,p3, p2,p4, nrows = 2)
prophet_model <- prophet_reg() %>%
set_engine(engine= "prophet") %>%
fit(sales~date, data = training(cv_split1))
cv_results <- modeltime_calibrate(prophet_model,
new_data = testing(cv_split1))
prophet_fullfit <- cv_results %>%
modeltime_refit(data = train)
prophet_preds <- prophet_fullfit %>%
modeltime_forecast(new_data=train) %>%
rename(date= .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y= ID_test, by= "date") %>%
select(id, sales)
prophet_fullfit %>%
modeltime_forecast(new_data= train, actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE, .legend_show = FALSE)
cv_results <- modeltime_calibrate(prophet_model,
new_data = testing(cv_split1))
prophet_model <- prophet_reg() %>%
set_engine(engine= "prophet") %>%
fit(sales~date, data = training(cv_split1))
cv_results <- modeltime_calibrate(prophet_model,
new_data = testing(cv_split1))
cv_split1 %>% tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
cv_results %>%
modeltime_forecast(new_data = testing(cv_split),
actual_data = train) %>%
plot_modeltime_forecast(.interactive = TRUE)
cv_results %>%
modeltime_forecast(new_data = testing(cv_split1),
actual_data = train) %>%
plot_modeltime_forecast(.interactive = TRUE)
es_fullfit <- cv_results %>%
modeltime_refit(data = train)
es_preds <- es_fullfit %>%
modeltime_forecast(h = "3 months") %>%
rename(date= .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y= ID_test, by= "date") %>%
select(id, sales)
p2 <-es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE)
es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE)
train2 <- ID_train %>% filter(store == 5, item == 7)
cv_split2 <- time_series_split(train2, assess= "3 months", cumulative = TRUE)
prophet_model <- prophet_reg() %>%
set_engine(engine= "prophet") %>%
fit(sales~date, data = training(cv_split2))
cv_results <- modeltime_calibrate(prophet_model,
new_data = testing(cv_split2))
cv_split2 %>% tk_time_series_cv_plan() %>%
plot_time_series_cv_plan(date, sales, .interactive = FALSE)
cv_results %>%
modeltime_forecast(new_data = testing(cv_split2),
actual_data = train2) %>%
plot_modeltime_forecast(.interactive = TRUE)
cv_results %>% modeltime_accuracy() %>%
table_modeltime_accuracy(
.interactive = FALSE)
es_fullfit <- cv_results %>%
modeltime_refit(data = train2)
es_preds <- es_fullfit %>%
modeltime_forecast(h = "3 months") %>%
rename(date= .index, sales = .value) %>%
select(date, sales) %>%
full_join(., y= ID_test, by= "date") %>%
select(id, sales)
es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train2) %>%
plot_modeltime_forecast(.interactive = FALSE)
p3 <- cv_results %>%
modeltime_forecast(new_data = testing(cv_split2),
actual_data = train2) %>%
plot_modeltime_forecast(.interactive = TRUE)
p4 <- es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train2) %>%
plot_modeltime_forecast(.interactive = FALSE)
plotly::subplot(p1,p3, p2,p4, nrows = 2)
p1 <- cv_results %>%
modeltime_forecast(new_data = testing(cv_split1),
actual_data = train) %>%
plot_modeltime_forecast(.interactive = TRUE)
p2 <- es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE)
plotly::subplot(p1,p3, p2,p4, nrows = 2)
p1 <- cv_results %>%
modeltime_forecast(new_data = testing(cv_split1),
actual_data = train) %>%
plot_modeltime_forecast(.interactive = TRUE, .legend_show = FALSE)
p2 <- es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train) %>%
plot_modeltime_forecast(.interactive = FALSE, .legend_show = FALSE)
p3 <- cv_results %>%
modeltime_forecast(new_data = testing(cv_split2),
actual_data = train2) %>%
plot_modeltime_forecast(.interactive = TRUE, .legend_show = FALSE)
p4 <- es_fullfit %>%
modeltime_forecast(h = "3 months", actual_data = train2) %>%
plot_modeltime_forecast(.interactive = FALSE, .legend_show = FALSE)
plotly::subplot(p1,p3, p2,p4, nrows = 2)
test1 <- ID_test %>% filter(store == 3, item == 10)
cv_split1 <- time_series_split(test1, assess= "3 months", cumulative = TRUE)
